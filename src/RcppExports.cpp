// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ARIMA_BIC_changepointGA_rcpp
double ARIMA_BIC_changepointGA_rcpp(NumericVector chromosome_, NumericMatrix XMat_, NumericVector Xt_);
RcppExport SEXP _changepointGA_ARIMA_BIC_changepointGA_rcpp(SEXP chromosome_SEXP, SEXP XMat_SEXP, SEXP Xt_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type chromosome_(chromosome_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type XMat_(XMat_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xt_(Xt_SEXP);
    rcpp_result_gen = Rcpp::wrap(ARIMA_BIC_changepointGA_rcpp(chromosome_, XMat_, Xt_));
    return rcpp_result_gen;
END_RCPP
}
// rank_asR
IntegerVector rank_asR(NumericVector x, bool decreasing);
RcppExport SEXP _changepointGA_rank_asR(SEXP xSEXP, SEXP decreasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type decreasing(decreasingSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_asR(x, decreasing));
    return rcpp_result_gen;
END_RCPP
}
// selectTau
arma::vec selectTau(int N, List prange, int minDist, double Pb, int mmax, int lmax);
RcppExport SEXP _changepointGA_selectTau(SEXP NSEXP, SEXP prangeSEXP, SEXP minDistSEXP, SEXP PbSEXP, SEXP mmaxSEXP, SEXP lmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< List >::type prange(prangeSEXP);
    Rcpp::traits::input_parameter< int >::type minDist(minDistSEXP);
    Rcpp::traits::input_parameter< double >::type Pb(PbSEXP);
    Rcpp::traits::input_parameter< int >::type mmax(mmaxSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(selectTau(N, prange, minDist, Pb, mmax, lmax));
    return rcpp_result_gen;
END_RCPP
}
// random_population
arma::mat random_population(int popsize, List prange, int N, int minDist, double Pb, int mmax, int lmax);
RcppExport SEXP _changepointGA_random_population(SEXP popsizeSEXP, SEXP prangeSEXP, SEXP NSEXP, SEXP minDistSEXP, SEXP PbSEXP, SEXP mmaxSEXP, SEXP lmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type popsize(popsizeSEXP);
    Rcpp::traits::input_parameter< List >::type prange(prangeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type minDist(minDistSEXP);
    Rcpp::traits::input_parameter< double >::type Pb(PbSEXP);
    Rcpp::traits::input_parameter< int >::type mmax(mmaxSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(random_population(popsize, prange, N, minDist, Pb, mmax, lmax));
    return rcpp_result_gen;
END_RCPP
}
// uniformcrossover
arma::vec uniformcrossover(arma::vec& mom, arma::vec& dad, List prange, int minDist, int lmax, int N);
RcppExport SEXP _changepointGA_uniformcrossover(SEXP momSEXP, SEXP dadSEXP, SEXP prangeSEXP, SEXP minDistSEXP, SEXP lmaxSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mom(momSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type dad(dadSEXP);
    Rcpp::traits::input_parameter< List >::type prange(prangeSEXP);
    Rcpp::traits::input_parameter< int >::type minDist(minDistSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(uniformcrossover(mom, dad, prange, minDist, lmax, N));
    return rcpp_result_gen;
END_RCPP
}
// selection_linearrank
List selection_linearrank(arma::mat& pop, arma::vec& popFit);
RcppExport SEXP _changepointGA_selection_linearrank(SEXP popSEXP, SEXP popFitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type popFit(popFitSEXP);
    rcpp_result_gen = Rcpp::wrap(selection_linearrank(pop, popFit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_changepointGA_ARIMA_BIC_changepointGA_rcpp", (DL_FUNC) &_changepointGA_ARIMA_BIC_changepointGA_rcpp, 3},
    {"_changepointGA_rank_asR", (DL_FUNC) &_changepointGA_rank_asR, 2},
    {"_changepointGA_selectTau", (DL_FUNC) &_changepointGA_selectTau, 6},
    {"_changepointGA_random_population", (DL_FUNC) &_changepointGA_random_population, 7},
    {"_changepointGA_uniformcrossover", (DL_FUNC) &_changepointGA_uniformcrossover, 6},
    {"_changepointGA_selection_linearrank", (DL_FUNC) &_changepointGA_selection_linearrank, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_changepointGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
